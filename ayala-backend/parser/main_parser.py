from playwright.sync_api import sync_playwright
import csv
import time
import re
import os
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
USE_PROXY = False  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ True —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏
PROXY_ROTATION_INTERVAL = 1000  # –ú–µ–Ω—è—Ç—å –ø—Ä–æ–∫—Å–∏ –∫–∞–∂–¥—ã–µ N –∫–æ–º–ø–∞–Ω–∏–π

# –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ HTTP)
PROXY_LIST = [
    {
        'server': 'http://94.131.2.254:40068',
        'username': 'NuhaiProxy_VP3eYoUt',
        'password': 'Vh0VvZE9'
    }
]

def get_random_proxy():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ None –µ—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã"""
    if not USE_PROXY or not PROXY_LIST:
        return None
    return random.choice(PROXY_LIST)

def create_browser_with_proxy(playwright, proxy_config=None, retry_without_proxy=True):
    """–°–æ–∑–¥–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ–∫—Å–∏"""
    browser_args = {
        'headless': False,
        'args': ['--disable-blink-features=AutomationControlled']
    }
    
    if proxy_config:
        try:
            browser_args['proxy'] = {
                'server': proxy_config['server'],
                'username': proxy_config['username'],
                'password': proxy_config['password']
            }
            print(f"–ò—Å–ø–æ–ª—å–∑—É—é –ø—Ä–æ–∫—Å–∏: {proxy_config['server']}")
            return playwright.chromium.launch(**browser_args)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ–∫—Å–∏ {proxy_config['server']}: {e}")
            if retry_without_proxy:
                print("üîÑ –ü—Ä–æ–±—É—é —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –ø—Ä–æ–∫—Å–∏...")
                return create_browser_with_proxy(playwright, None, False)
            else:
                raise e
    else:
        print("–†–∞–±–æ—Ç–∞—é –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
        return playwright.chromium.launch(**browser_args)

def get_company_data(url):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–π —Å —Å–∞–π—Ç–∞ statsnet.co –∏—Å–ø–æ–ª—å–∑—É—è Playwright —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –ø—Ä–æ–∫—Å–∏
    """
    companies = []
    total_companies_processed = 0
    failed_companies = 0
    
    with sync_playwright() as p:
        # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–∫—Å–∏
        current_proxy = get_random_proxy()
        browser = create_browser_with_proxy(p, current_proxy)
        page = browser.new_page()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º User-Agent –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        page.set_extra_http_headers({
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        page.set_viewport_size({"width": 1920, "height": 1080})
        
        page_num = 1
        
        try:
            while True:
                print(f"\nüîç –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num}...")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                page_url = f"{url}?page={page_num}" if page_num > 1 else url
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
                try:
                    print(f"üìÑ –ó–∞–≥—Ä—É–∂–∞—é: {page_url}")
                    page.goto(page_url, timeout=30000)
                    # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É JavaScript
                    time.sleep(3)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
                    try:
                        print("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏...")
                        page.goto(page_url, timeout=60000)
                        time.sleep(5)
                    except Exception as e2:
                        print(f"‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: {e2}")
                        break
                
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ–º–ø–∞–Ω–∏–π
                try:
                    page.wait_for_selector('li.flex.flex-col.border-b.py-2', timeout=15000)
                    print("‚úÖ –≠–ª–µ–º–µ–Ω—Ç—ã –∫–æ–º–ø–∞–Ω–∏–π –Ω–∞–π–¥–µ–Ω—ã")
                except Exception as e:
                    print(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã –∫–æ–º–ø–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {e}")
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                    try:
                        alternative_elements = page.locator('li').all()
                        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(alternative_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ li –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                        if len(alternative_elements) == 0:
                            print("üö´ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –ó–∞–≤–µ—Ä—à–∞—é –ø–∞—Ä—Å–∏–Ω–≥.")
                            break
                    except:
                        print("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏–∫–∞–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –ó–∞–≤–µ—Ä—à–∞—é –ø–∞—Ä—Å–∏–Ω–≥.")
                        break
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ–º–ø–∞–Ω–∏–π
                company_elements = page.locator('li.flex.flex-col.border-b.py-2').all()
                
                if not company_elements:
                    print("üö´ –ë–æ–ª—å—à–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.")
                    break
                
                print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(company_elements)} –∫–æ–º–ø–∞–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num}")
                
                page_companies_processed = 0
                page_companies_failed = 0
                
                for i, element in enumerate(company_elements):
                    try:
                        print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–ø–∞–Ω–∏—é {i+1}/{len(company_elements)}...")
                        company_data = parse_company_element(element)
                        if company_data and company_data.get('name'):
                            companies.append(company_data)
                            total_companies_processed += 1
                            page_companies_processed += 1
                            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞: {company_data['name'][:50]}...")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–º–µ–Ω–∏—Ç—å –ø—Ä–æ–∫—Å–∏
                            if USE_PROXY and total_companies_processed % PROXY_ROTATION_INTERVAL == 0:
                                print(f"\nüîÑ –°–º–µ–Ω–∞ –ø—Ä–æ–∫—Å–∏ –ø–æ—Å–ª–µ {total_companies_processed} –∫–æ–º–ø–∞–Ω–∏–π...")
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–º–µ–Ω–æ–π –ø—Ä–æ–∫—Å–∏
                                if companies:
                                    temp_filename = f"data/almaty_temp_{total_companies_processed}.csv"
                                    save_to_csv(companies, temp_filename)
                                    companies = []
                                
                                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±—Ä–∞—É–∑–µ—Ä
                                browser.close()
                                
                                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±—Ä–∞—É–∑–µ—Ä —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏
                                current_proxy = get_random_proxy()
                                browser = create_browser_with_proxy(p, current_proxy)
                                page = browser.new_page()
                                
                                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                                page.set_extra_http_headers({
                                    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
                                })
                                page.set_viewport_size({"width": 1920, "height": 1080})
                                print("‚úÖ –ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω\n")
                        else:
                            page_companies_failed += 1
                            failed_companies += 1
                            print(f"‚ö†Ô∏è –ö–æ–º–ø–∞–Ω–∏—è {i+1} –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)")
                            
                    except Exception as e:
                        page_companies_failed += 1
                        failed_companies += 1
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–æ–º–ø–∞–Ω–∏–∏ {i+1}: {e}")
                        continue
                
                print(f"üìä –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {page_companies_processed}, –æ—à–∏–±–æ–∫ {page_companies_failed}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 10 —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
                if page_num % 10 == 0 and companies:
                    start_page = page_num - 9
                    end_page = page_num
                    filename = f"data/almaty_pages_{start_page}-{end_page}.csv"
                    save_to_csv(companies, filename)
                    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(companies)} –∫–æ–º–ø–∞–Ω–∏–π –≤ —Ñ–∞–π–ª {filename}")
                    companies = []  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö 10 —Å—Ç—Ä–∞–Ω–∏—Ü
                
                page_num += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
                print(f"‚è±Ô∏è –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π...")
                time.sleep(3)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                if page_num > 50:  # –ú–∞–∫—Å–∏–º—É–º 50 —Å—Ç—Ä–∞–Ω–∏—Ü
                    print("üõë –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü (50)")
                    break
                    
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±—Ä–∞—É–∑–µ—Ä–æ–º: {e}")
        finally:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
            if companies:
                last_full_batch = ((page_num - 1) // 10) * 10
                start_page = last_full_batch + 1
                end_page = page_num - 1
                filename = f"data/almaty_pages_{start_page}-{end_page}.csv"
                save_to_csv(companies, filename)
                print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –æ—Å—Ç–∞–≤—à–∏–µ—Å—è {len(companies)} –∫–æ–º–ø–∞–Ω–∏–π –≤ —Ñ–∞–π–ª {filename}")
            
            browser.close()
    
    print(f"\nüìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"‚úÖ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π: {total_companies_processed}")
    print(f"‚ùå –û—à–∏–±–æ–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {failed_companies}")
    
    return companies

def parse_company_element(element):
    """
    –ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ Playwright —ç–ª–µ–º–µ–Ω—Ç–∞
    """
    company_data = {}
    
    try:
        # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
        name_element = element.locator('h2').first
        company_data['name'] = name_element.inner_text().strip() if name_element.count() > 0 else ""
        
        if not company_data['name']:
            return None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        address = ""
        activity = ""
        manager = ""
        company_size = ""
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
        paragraphs = element.locator('p').all()
        
        for p in paragraphs:
            try:
                text = p.inner_text().strip()
                
                # –ê–¥—Ä–µ—Å (—Å–æ–¥–µ—Ä–∂–∏—Ç "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω")
                if "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω" in text:
                    address = text
                
                # –†–∞–∑–º–µ—Ä –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è (—Å–æ–¥–µ—Ä–∂–∏—Ç "—á–µ–ª." –∏–ª–∏ "–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ")
                elif "—á–µ–ª." in text or "–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ" in text:
                    company_size = text
                
                # –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å (—Å–æ–¥–µ—Ä–∂–∏—Ç "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å")
                elif "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å" in text:
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –∏–º—è –±–µ–∑ "‚Äî —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å"
                    manager_parts = text.split("‚Äî")
                    if len(manager_parts) > 1:
                        manager = manager_parts[0].strip()
                    else:
                        manager = text.replace("—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", "").strip()
            except:
                continue
        
        # –û–ø–∏—Å–∞–Ω–∏–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        try:
            activity_elements = element.locator('div.text-sm.gap-1').all()
            for activity_div in activity_elements:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ div —Å —Ä–∞–∑–º–µ—Ä–æ–º –∫–æ–º–ø–∞–Ω–∏–∏
                activity_text = activity_div.inner_text().strip()
                if activity_text and "—á–µ–ª." not in activity_text and "–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ" not in activity_text:
                    activity = activity_text
                    break
        except:
            pass
        
        # –ë–ò–ù –∏ –ù–î–°
        bin_number = ""
        nds_number = ""
        
        try:
            # –ò—â–µ–º div —Å –∫–ª–∞—Å—Å–æ–º d-flex –¥–ª—è –ë–ò–ù –∏ –ù–î–°
            bin_nds_element = element.locator('div.d-flex').first
            if bin_nds_element.count() > 0:
                text = bin_nds_element.inner_text()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ë–ò–ù
                bin_match = re.search(r'–ë–ò–ù\s*(\d+)', text)
                if bin_match:
                    bin_number = bin_match.group(1)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ù–î–°
                nds_match = re.search(r'–ù–î–°\s*([\d-]+)', text)
                if nds_match:
                    nds_number = nds_match.group(1)
        except:
            pass
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—é
        company_link = ""
        try:
            link_element = element.locator('a[href]').first
            if link_element.count() > 0:
                href = link_element.get_attribute('href')
                if href:
                    company_link = f"https://statsnet.co{href}"
        except:
            pass
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–∞–Ω–∏–∏ (–∑–µ–ª–µ–Ω—ã–π/–∫—Ä–∞—Å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä)
        status = ""
        try:
            status_element = element.locator('span.ui-status').first
            if status_element.count() > 0:
                status_class = status_element.get_attribute('class')
                if 'ui-status--green' in status_class:
                    status = "–ê–∫—Ç–∏–≤–Ω–∞—è"
                elif 'ui-status--red' in status_class:
                    status = "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è"
        except:
            pass
        
        company_data.update({
            'address': address,
            'activity': activity,
            'manager': manager,
            'company_size': company_size,
            'bin': bin_number,
            'nds': nds_number,
            'link': company_link,
            'status': status
        })
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
        return None
    
    return company_data

def save_to_csv(companies, filename):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–π –≤ CSV —Ñ–∞–π–ª
    """
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é data –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs('data', exist_ok=True)
    
    fieldnames = ['name', 'address', 'activity', 'manager', 'company_size', 'bin', 'nds', 'link', 'status']
    
    with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        
        for company in companies:
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
            cleaned_company = {}
            for key, value in company.items():
                if isinstance(value, str):
                    cleaned_company[key] = ' '.join(value.split())
                else:
                    cleaned_company[key] = value
            writer.writerow(cleaned_company)
    
    print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª {filename}")
    print(f"üìä –í—Å–µ–≥–æ –∫–æ–º–ø–∞–Ω–∏–π: {len(companies)}")

def merge_csv_files(file_list, output_filename):
    """
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ CSV —Ñ–∞–π–ª–æ–≤ –≤ –æ–¥–∏–Ω
    """
    fieldnames = ['name', 'address', 'activity', 'manager', 'company_size', 'bin', 'nds', 'link', 'status']
    
    with open(output_filename, 'w', newline='', encoding='utf-8') as outfile:
        writer = csv.DictWriter(outfile, fieldnames=fieldnames)
        writer.writeheader()
        
        for filename in sorted(file_list):
            with open(filename, 'r', encoding='utf-8') as infile:
                reader = csv.DictReader(infile)
                for row in reader:
                    writer.writerow(row)

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    url = "https://statsnet.co/states/kz/almaty"
    csv_filename = "data/almaty.csv"
    
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞ statsnet.co —Å –ø–æ–º–æ—â—å—é Playwright...")
    print(f"üåê URL: {url}")
    print(f"üìÅ –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {csv_filename}")
    print(f"üîß –ü—Ä–æ–∫—Å–∏: {'–≤–∫–ª—é—á–µ–Ω—ã' if USE_PROXY else '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}")
    print("-" * 60)
    
    try:
        companies = get_company_data(url)
        
        print("-" * 60)
        print("üéâ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–∞–Ω–∏–π –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
        import glob
        total_companies = 0
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã (–æ–±—ã—á–Ω—ã–µ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ)
        csv_files = glob.glob("data/almaty_pages_*.csv")
        temp_files = glob.glob("data/almaty_temp_*.csv")
        all_files = csv_files + temp_files
        
        if all_files:
            print(f"üìÅ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(all_files)}")
            for file in sorted(all_files):
                with open(file, 'r', encoding='utf-8') as f:
                    lines = len(f.readlines()) - 1  # -1 –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
                    total_companies += lines
                    print(f"  üìÑ {file}: {lines} –∫–æ–º–ø–∞–Ω–∏–π")
            
            print(f"\nüìà –í—Å–µ–≥–æ —Å–ø–∞—Ä—Å–µ–Ω–æ: {total_companies} –∫–æ–º–ø–∞–Ω–∏–π")
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –æ–¥–∏–Ω –∏—Ç–æ–≥–æ–≤—ã–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            if len(all_files) > 1:
                print("\nüîÑ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤...")
                merge_csv_files(all_files, "data/almaty_complete.csv")
                print("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª data/almaty_complete.csv")
        else:
            print("‚ùå –§–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 